<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/fox/Python/SQL/SQL Lite/Popular music store/chinook.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3862"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,8:maininvoices"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="albums" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="61"/><column index="2" value="300"/><column index="3" value="59"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="artists" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="59"/><column index="2" value="300"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="83"/><column index="2" value="71"/><column index="3" value="83"/><column index="4" value="294"/><column index="5" value="264"/><column index="6" value="132"/><column index="7" value="44"/><column index="8" value="96"/><column index="9" value="80"/><column index="10" value="128"/><column index="11" value="122"/><column index="12" value="183"/><column index="13" value="98"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="employees" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="82"/><column index="2" value="71"/><column index="3" value="71"/><column index="4" value="124"/><column index="5" value="75"/><column index="6" value="129"/><column index="7" value="129"/><column index="8" value="178"/><column index="9" value="67"/><column index="10" value="44"/><column index="11" value="60"/><column index="12" value="80"/><column index="13" value="115"/><column index="14" value="115"/><column index="15" value="168"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="genres" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="59"/><column index="2" value="112"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="invoice_items" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="94"/><column index="2" value="68"/><column index="3" value="56"/><column index="4" value="65"/><column index="5" value="64"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="invoices" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="68"/><column index="2" value="83"/><column index="3" value="129"/><column index="4" value="264"/><column index="5" value="132"/><column index="6" value="80"/><column index="7" value="96"/><column index="8" value="116"/><column index="9" value="131"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="media_types" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="90"/><column index="2" value="164"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="playlist_track" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="1" mode="0"/></sort><column_widths><column index="1" value="67"/><column index="2" value="56"/></column_widths><filter_values><column index="2" value="1099"/></filter_values><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="playlists" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="67"/><column index="2" value="155"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="sqlite_sequence" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="84"/><column index="2" value="40"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="sqlite_stat1" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="84"/><column index="2" value="194"/><column index="3" value="71"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="tracks" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="56"/><column index="2" value="300"/><column index="3" value="61"/><column index="4" value="90"/><column index="5" value="59"/><column index="6" value="300"/><column index="7" value="84"/><column index="8" value="63"/><column index="9" value="65"/></column_widths><filter_values><column index="2" value="let's"/></filter_values><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="Asignment_1">WITH first_query AS (
SELECT TrackId, COUNT(*) AS Quantity, PlaylistId
FROM playlist_track
GROUP BY 3
ORDER BY 2 DESC
), second_query AS (
SELECT SUM (Quantity) AS 'Total Number', TrackId
FROM first_query
GROUP BY 2
ORDER BY 1 DESC
), third_query AS (
SELECT *
FROM second_query
LEFT JOIN tracks
	ON second_query.TrackId = tracks.TrackId
)
SELECT &quot;Total Number&quot;, &quot;TrackId&quot;, &quot;Name&quot;, &quot;Composer&quot;
FROM third_query; 	</sql><sql name="Asignment_2 (not used)">WITH first_query AS (
SELECT TrackId, COUNT(*) AS Quantity, PlaylistId
FROM playlist_track
GROUP BY 3
ORDER BY 2 DESC
), second_query AS(
SELECT SUM (Quantity) AS 'Total Number', TrackId, PlaylistId
FROM first_query
GROUP BY 3
ORDER BY 1 DESC
), third_query AS(
SELECT *
FROM second_query
LEFT JOIN playlists
	ON second_query.PlaylistId = playlists.PlaylistId
)
SELECT DISTINCT (Name)
FROM third_query;
	
	</sql><sql name="Asignment_3">WITH first_query AS (
SELECT SUM(UnitPrice) AS &quot;Revenue by Track&quot;, TrackId
FROM invoice_items
GROUP BY 2
ORDER BY 1 DESC
LIMIT 10
), second_query AS (
SELECT *
FROM first_query
LEFT JOIN tracks
	ON first_query.TrackId = tracks.TrackId
)
SELECT &quot;TrackId&quot;, &quot;Name&quot;, &quot;Revenue by Track&quot;
FROM second_query;
</sql><sql name="Asignment_4">WITH first_query AS (
SELECT *
FROM invoice_items
LEFT JOIN tracks
	ON invoice_items.TrackId = tracks.TrackId
), second_query AS (
SELECT SUM (UnitPrice) AS &quot;Revenue by Album&quot;, AlbumId
FROM first_query
GROUP BY 2
ORDER BY 1 DESC
LIMIT 10
), third_query AS (
SELECT *
FROM second_query
LEFT JOIN albums
	ON second_query.AlbumId= albums.AlbumId
)
SELECT &quot;AlbumId&quot;, &quot;Title&quot;, &quot;ArtistId&quot;, &quot;Revenue by Album&quot;
FROM third_query;
</sql><sql name="Asignment_5">WITH first_query AS (
SELECT *
FROM invoice_items
LEFT JOIN tracks
	ON invoice_items.TrackId = tracks.TrackId
), second_query AS (
SELECT ROUND (SUM (UnitPrice),2) AS &quot;Revenue by Genre&quot;, GenreId
FROM first_query
GROUP BY 2
ORDER BY 1 DESC
LIMIT 10
), third_query AS (
SELECT *
FROM second_query
LEFT JOIN genres
	ON second_query.GenreId = genres.GenreId
)
SELECT GenreId, Name, &quot;Revenue by Genre&quot;
FROM third_query;</sql><sql name="Asignment_6">SELECT ROUND (SUM (Total),0) AS &quot;Sales Revenue by Country&quot;, BillingCountry
FROM invoices
GROUP BY 2
ORDER BY 1 DESC
LIMIT 5;</sql><sql name="Asignment_7">WITH first_query AS (
SELECT ROUND (SUM (Total),0) AS &quot;Sales Revenue by Country&quot;, BillingCountry
FROM invoices
GROUP BY 2
ORDER BY 1 DESC
)
SELECT BillingCountry, &quot;Sales Revenue by Country&quot;, 
       (ROUND(SUM(&quot;Sales Revenue by Country&quot;) / (SELECT SUM(&quot;Sales Revenue by Country&quot;) FROM first_query), 3))*100 AS Percentage
FROM first_query
GROUP BY BillingCountry
ORDER BY percentage DESC;</sql><sql name="Asignment_8">WITH first_query AS(SELECT *
FROM customers
LEFT JOIN employees
	ON customers.SupportRepId = employees.EmployeeId
)	
SELECT COUNT (*) AS &quot;Total Number&quot;, EmployeeId, &quot;LastName:1&quot; AS &quot;Last Name&quot;, &quot;FirstName:1&quot; AS &quot;First Name&quot;, Title
FROM first_query
GROUP BY EmployeeId;</sql><sql name="Asignment_9">WITH first_query AS (
SELECT CustomerId, ROUND(AVG (Total),2) AS &quot;Average Sale&quot;
FROM invoices
GROUP BY CustomerId
ORDER BY 2 DESC
), second_query AS(
SELECT *
FROM first_query
LEFT JOIN customers
	ON first_query.CustomerId = customers.CustomerId
), third_query AS (
SELECT ROUND(SUM (&quot;Average Sale&quot;), 2) AS &quot;Average Revenue per Sale&quot;, SupportRepId
FROM second_query
GROUP BY SupportRepId
)
SELECT EmployeeId, LastName, FirstName, &quot;Average Revenue per Sale&quot;
FROM third_query
LEFT JOIN employees
	ON third_query.SupportRepId = employees.EmployeeId
ORDER BY &quot;Average Sale by Employee&quot; DESC;</sql><sql name="Asignment_10">WITH first_query AS (
SELECT CustomerId, ROUND(SUM (Total),0) AS &quot;Total Revenue&quot;
FROM invoices
GROUP BY CustomerId
ORDER BY 2 DESC
), second_query AS(
SELECT *
FROM first_query
LEFT JOIN customers
	ON first_query.CustomerId = customers.CustomerId
), third_query AS (
SELECT SUM (&quot;Total Revenue&quot;) AS &quot;Total Revenue per Employee&quot;, SupportRepId
FROM second_query
GROUP BY SupportRepId
)
SELECT EmployeeId, LastName, FirstName, &quot;Total Revenue per Employee&quot;
FROM third_query
LEFT JOIN employees
	ON third_query.SupportRepId = employees.EmployeeId
ORDER BY &quot;Total Revenue by Employee&quot; DESC;
</sql><sql name="Asignment_11">WITH first_query AS (
SELECT *
FROM invoice_items
LEFT JOIN tracks
	ON invoice_items.TrackId = tracks.TrackId
), second_query AS (
SELECT ROUND(SUM (UnitPrice),2) AS &quot;Revenue by Album&quot;, AlbumId
FROM first_query
GROUP BY 2
ORDER BY 1 DESC
LIMIT 10
), third_query AS (
SELECT *
FROM second_query
LEFT JOIN albums
	ON second_query.AlbumId= albums.AlbumId
), revenue_by_album AS (
SELECT &quot;AlbumId&quot;, &quot;Title&quot;, &quot;ArtistId&quot;, &quot;Revenue by Album&quot;
FROM third_query
), number_of_tracks AS (
SELECT COUNT (*) AS &quot;Number of Tracks&quot;, AlbumId, Name
FROM tracks
GROUP BY AlbumId
ORDER BY 1 DESC
), join_table AS (
SELECT *
FROM revenue_by_album
LEFT JOIN number_of_tracks
	ON revenue_by_album.AlbumId = number_of_tracks.AlbumId
)
SELECT AlbumId, Title, &quot;Number of Tracks&quot;, &quot;Revenue by Album&quot;
FROM join_table
ORDER BY 4 DESC;</sql><sql name="Asignment_12">WITH first_query AS (
SELECT SUM(UnitPrice) AS &quot;Revenue by Track&quot;, TrackId
FROM invoice_items
GROUP BY 2
ORDER BY 1 DESC
), second_query AS (
SELECT *
FROM first_query
LEFT JOIN tracks
	ON first_query.TrackId = tracks.TrackId
), revenue_by_track AS(
SELECT &quot;Revenue by Track&quot;, &quot;TrackId&quot;, &quot;Name&quot;
FROM second_query
), number_of_appearance AS (
SELECT COUNT (*) AS &quot;Number of Appearance&quot;, TrackId
FROM playlist_track
GROUP BY TrackId
ORDER BY 1 DESC
)
SELECT *
FROM number_of_appearance 
LEFT JOIN revenue_by_track
	ON number_of_appearance.TrackId = revenue_by_track.TrackId
WHERE &quot;Revenue by Track&quot; IS NOT NULL
ORDER BY &quot;Revenue by Track&quot; DESC;
</sql><sql name="Asignment_13">WITH Revenue AS (
SELECT ROUND(SUM (Total), 2) AS Revenue, CAST(strftime('%Y', InvoiceDate) AS INTEGER) AS &quot;Current Year&quot;, CAST(strftime('%Y', InvoiceDate)-1 AS INTEGER) AS &quot;Previous Year&quot;
FROM invoices
GROUP BY 2
ORDER BY 2
)
SELECT current.&quot;Previous Year&quot;, current.&quot;Current Year&quot;, current.Revenue, ROUND((current.Revenue - previous.Revenue)/previous.Revenue * 100, 2) AS &quot;% change compared to the last year&quot;
FROM Revenue current 
LEFT JOIN Revenue previous
	ON current.&quot;Previous Year&quot; = previous.&quot;Current Year&quot;;
</sql><sql name="Draft">SELECT SUM (Total) AS Revenue, CAST(strftime('%Y', InvoiceDate) AS INTEGER) AS &quot;Current Year&quot;, CAST(strftime('%Y', InvoiceDate)-1 AS INTEGER) AS &quot;Previous Year&quot;
FROM invoices
GROUP BY 2
ORDER BY 2</sql><current_tab id="12"/></tab_sql></sqlb_project>
